// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.3.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/discord-gophers/goapi-gen/runtime"
	openapi_types "github.com/discord-gophers/goapi-gen/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for Status.
var (
	UnknownStatus = Status{}

	StatusActive = Status{"active"}

	StatusInactive = Status{"inactive"}
)

// Application defines model for Application.
type Application struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

// BasicCreationResponse defines model for BasicCreationResponse.
type BasicCreationResponse struct {
	Feedback string `json:"feedback"`
	ID       string `json:"id"`
}

// BasicResponse defines model for BasicResponse.
type BasicResponse struct {
	Feedback string `json:"feedback"`
}

// Error defines model for Error.
type Error struct {
	Feedback string `json:"feedback"`
}

// Group defines model for Group.
type Group struct {
	ID   string `json:"id"`
	Name string `json:"name"`

	// Este objeto é composto pela definição de permissões onde a chave é o identificador do recurso e o valor é o número da permissão
	Permissions map[string]interface{} `json:"permissions"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	Feedback string `json:"feedback"`
}

// LoginCredentials defines model for LoginCredentials.
type LoginCredentials struct {
	Application string              `json:"application" validate:"required"`
	Email       openapi_types.Email `json:"email" validate:"required"`
	Password    string              `json:"password" validate:"required,min=8,max=32"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Feedback string `json:"feedback"`
	Token    string `json:"token"`
}

// NewApplication defines model for NewApplication.
type NewApplication struct {
	Name string `json:"name" validate:"required"`
}

// NewGroup defines model for NewGroup.
type NewGroup struct {
	Name string `json:"name" validate:"required,min=3"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	Email    openapi_types.Email `json:"email" validate:"required,email"`
	GroupID  string              `json:"groupId" validate:"required"`
	Name     string              `json:"name" validate:"required,min=3"`
	Password string              `json:"password" validate:"required,min=8,max=32"`
}

// Permission defines model for Permission.
type Permission struct {
	Key        string `json:"key" validate:"required,min=3"`
	Permission int    `json:"permission" validate:"required"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized struct {
	Feedback string `json:"feedback"`
}

// UpdatedGroup defines model for UpdatedGroup.
type UpdatedGroup struct {
	NewName string `json:"newName" validate:"required,min=3"`
}

// User defines model for User.
type User struct {
	Email openapi_types.Email `json:"email"`
	Group struct {
		ID   string `json:"id"`
		Name string `json:"name"`
	} `json:"group"`
	Name   string `json:"name"`
	Status Status `json:"status"`
}

// UserUpdated defines model for UserUpdated.
type UserUpdated struct {
	GroupID     string               `json:"groupId" validate:"required"`
	Name        string               `json:"name" validate:"required,min=3"`
	NewEmail    *openapi_types.Email `json:"newEmail,omitempty" validate:"email"`
	NewPassword *string              `json:"newPassword,omitempty" validate:"min=8,max=32"`
	Status      Status               `json:"status"`
}

// N400 defines model for 400.
type N400 Error

// N401 defines model for 401.
type N401 Unauthorized

// N500 defines model for 500.
type N500 InternalServerError

// Status defines model for Status.
type Status struct {
	value string
}

func (t *Status) ToValue() string {
	return t.value
}
func (t Status) MarshalJSON() ([]byte, error) {
	return json.Marshal(t.value)
}
func (t *Status) UnmarshalJSON(data []byte) error {
	var value string
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	return t.FromValue(value)
}
func (t *Status) FromValue(value string) error {
	switch value {

	case StatusActive.value:
		t.value = value
		return nil

	case StatusInactive.value:
		t.value = value
		return nil

	}
	return fmt.Errorf("unknown enum value: %v", value)
}

// NewApplicationJSONBody defines parameters for NewApplication.
type NewApplicationJSONBody NewApplication

// RenameGroupJSONBody defines parameters for RenameGroup.
type RenameGroupJSONBody UpdatedGroup

// AddPermissionJSONBody defines parameters for AddPermission.
type AddPermissionJSONBody Permission

// UpdatePermissionJSONBody defines parameters for UpdatePermission.
type UpdatePermissionJSONBody Permission

// NewGroupJSONBody defines parameters for NewGroup.
type NewGroupJSONBody NewGroup

// NewUserJSONBody defines parameters for NewUser.
type NewUserJSONBody NewUser

// UserUpdateJSONBody defines parameters for UserUpdate.
type UserUpdateJSONBody UserUpdated

// LoginJSONBody defines parameters for Login.
type LoginJSONBody LoginCredentials

// NewApplicationJSONRequestBody defines body for NewApplication for application/json ContentType.
type NewApplicationJSONRequestBody NewApplicationJSONBody

// Bind implements render.Binder.
func (NewApplicationJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// RenameGroupJSONRequestBody defines body for RenameGroup for application/json ContentType.
type RenameGroupJSONRequestBody RenameGroupJSONBody

// Bind implements render.Binder.
func (RenameGroupJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// AddPermissionJSONRequestBody defines body for AddPermission for application/json ContentType.
type AddPermissionJSONRequestBody AddPermissionJSONBody

// Bind implements render.Binder.
func (AddPermissionJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// UpdatePermissionJSONRequestBody defines body for UpdatePermission for application/json ContentType.
type UpdatePermissionJSONRequestBody UpdatePermissionJSONBody

// Bind implements render.Binder.
func (UpdatePermissionJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// NewGroupJSONRequestBody defines body for NewGroup for application/json ContentType.
type NewGroupJSONRequestBody NewGroupJSONBody

// Bind implements render.Binder.
func (NewGroupJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// NewUserJSONRequestBody defines body for NewUser for application/json ContentType.
type NewUserJSONRequestBody NewUserJSONBody

// Bind implements render.Binder.
func (NewUserJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// UserUpdateJSONRequestBody defines body for UserUpdate for application/json ContentType.
type UserUpdateJSONRequestBody UserUpdateJSONBody

// Bind implements render.Binder.
func (UserUpdateJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// Bind implements render.Binder.
func (LoginJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
// It may also be instantiated directly, for the purpose of responding with a single status code.
type Response struct {
	body        interface{}
	Code        int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.Code)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(code int) *Response {
	resp.Code = code
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// ApplicationsListJSON200Response is a constructor method for a ApplicationsList response.
// A *Response is returned with the configured status code and content type from the spec.
func ApplicationsListJSON200Response(body []Application) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// ApplicationsListJSON401Response is a constructor method for a ApplicationsList response.
// A *Response is returned with the configured status code and content type from the spec.
func ApplicationsListJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// ApplicationsListJSON500Response is a constructor method for a ApplicationsList response.
// A *Response is returned with the configured status code and content type from the spec.
func ApplicationsListJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// NewApplicationJSON201Response is a constructor method for a NewApplication response.
// A *Response is returned with the configured status code and content type from the spec.
func NewApplicationJSON201Response(body BasicCreationResponse) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// NewApplicationJSON400Response is a constructor method for a NewApplication response.
// A *Response is returned with the configured status code and content type from the spec.
func NewApplicationJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// NewApplicationJSON401Response is a constructor method for a NewApplication response.
// A *Response is returned with the configured status code and content type from the spec.
func NewApplicationJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// NewApplicationJSON500Response is a constructor method for a NewApplication response.
// A *Response is returned with the configured status code and content type from the spec.
func NewApplicationJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// DeleteGroupJSON200Response is a constructor method for a DeleteGroup response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteGroupJSON200Response(body BasicResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// DeleteGroupJSON400Response is a constructor method for a DeleteGroup response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteGroupJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// DeleteGroupJSON401Response is a constructor method for a DeleteGroup response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteGroupJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// DeleteGroupJSON500Response is a constructor method for a DeleteGroup response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteGroupJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// RenameGroupJSON200Response is a constructor method for a RenameGroup response.
// A *Response is returned with the configured status code and content type from the spec.
func RenameGroupJSON200Response(body BasicResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// RenameGroupJSON400Response is a constructor method for a RenameGroup response.
// A *Response is returned with the configured status code and content type from the spec.
func RenameGroupJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// RenameGroupJSON401Response is a constructor method for a RenameGroup response.
// A *Response is returned with the configured status code and content type from the spec.
func RenameGroupJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// RenameGroupJSON500Response is a constructor method for a RenameGroup response.
// A *Response is returned with the configured status code and content type from the spec.
func RenameGroupJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// AddPermissionJSON201Response is a constructor method for a AddPermission response.
// A *Response is returned with the configured status code and content type from the spec.
func AddPermissionJSON201Response(body BasicResponse) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// AddPermissionJSON400Response is a constructor method for a AddPermission response.
// A *Response is returned with the configured status code and content type from the spec.
func AddPermissionJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// AddPermissionJSON401Response is a constructor method for a AddPermission response.
// A *Response is returned with the configured status code and content type from the spec.
func AddPermissionJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// AddPermissionJSON500Response is a constructor method for a AddPermission response.
// A *Response is returned with the configured status code and content type from the spec.
func AddPermissionJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// DeletePermissionJSON200Response is a constructor method for a DeletePermission response.
// A *Response is returned with the configured status code and content type from the spec.
func DeletePermissionJSON200Response(body BasicResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// DeletePermissionJSON400Response is a constructor method for a DeletePermission response.
// A *Response is returned with the configured status code and content type from the spec.
func DeletePermissionJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// DeletePermissionJSON401Response is a constructor method for a DeletePermission response.
// A *Response is returned with the configured status code and content type from the spec.
func DeletePermissionJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// DeletePermissionJSON500Response is a constructor method for a DeletePermission response.
// A *Response is returned with the configured status code and content type from the spec.
func DeletePermissionJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// UpdatePermissionJSON200Response is a constructor method for a UpdatePermission response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdatePermissionJSON200Response(body BasicResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// UpdatePermissionJSON400Response is a constructor method for a UpdatePermission response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdatePermissionJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// UpdatePermissionJSON401Response is a constructor method for a UpdatePermission response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdatePermissionJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// UpdatePermissionJSON500Response is a constructor method for a UpdatePermission response.
// A *Response is returned with the configured status code and content type from the spec.
func UpdatePermissionJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// FindApplicationByIDJSON200Response is a constructor method for a FindApplicationByID response.
// A *Response is returned with the configured status code and content type from the spec.
func FindApplicationByIDJSON200Response(body Application) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// FindApplicationByIDJSON400Response is a constructor method for a FindApplicationByID response.
// A *Response is returned with the configured status code and content type from the spec.
func FindApplicationByIDJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// FindApplicationByIDJSON401Response is a constructor method for a FindApplicationByID response.
// A *Response is returned with the configured status code and content type from the spec.
func FindApplicationByIDJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// FindApplicationByIDJSON500Response is a constructor method for a FindApplicationByID response.
// A *Response is returned with the configured status code and content type from the spec.
func FindApplicationByIDJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// GroupsListJSON200Response is a constructor method for a GroupsList response.
// A *Response is returned with the configured status code and content type from the spec.
func GroupsListJSON200Response(body []Group) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// GroupsListJSON400Response is a constructor method for a GroupsList response.
// A *Response is returned with the configured status code and content type from the spec.
func GroupsListJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// GroupsListJSON401Response is a constructor method for a GroupsList response.
// A *Response is returned with the configured status code and content type from the spec.
func GroupsListJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// GroupsListJSON500Response is a constructor method for a GroupsList response.
// A *Response is returned with the configured status code and content type from the spec.
func GroupsListJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// NewGroupJSON201Response is a constructor method for a NewGroup response.
// A *Response is returned with the configured status code and content type from the spec.
func NewGroupJSON201Response(body BasicCreationResponse) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// NewGroupJSON400Response is a constructor method for a NewGroup response.
// A *Response is returned with the configured status code and content type from the spec.
func NewGroupJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// NewGroupJSON401Response is a constructor method for a NewGroup response.
// A *Response is returned with the configured status code and content type from the spec.
func NewGroupJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// NewGroupJSON500Response is a constructor method for a NewGroup response.
// A *Response is returned with the configured status code and content type from the spec.
func NewGroupJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// UsersListJSON200Response is a constructor method for a UsersList response.
// A *Response is returned with the configured status code and content type from the spec.
func UsersListJSON200Response(body []User) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// UsersListJSON400Response is a constructor method for a UsersList response.
// A *Response is returned with the configured status code and content type from the spec.
func UsersListJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// UsersListJSON401Response is a constructor method for a UsersList response.
// A *Response is returned with the configured status code and content type from the spec.
func UsersListJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// UsersListJSON500Response is a constructor method for a UsersList response.
// A *Response is returned with the configured status code and content type from the spec.
func UsersListJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// NewUserJSON201Response is a constructor method for a NewUser response.
// A *Response is returned with the configured status code and content type from the spec.
func NewUserJSON201Response(body BasicResponse) *Response {
	return &Response{
		body:        body,
		Code:        201,
		contentType: "application/json",
	}
}

// NewUserJSON400Response is a constructor method for a NewUser response.
// A *Response is returned with the configured status code and content type from the spec.
func NewUserJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// NewUserJSON401Response is a constructor method for a NewUser response.
// A *Response is returned with the configured status code and content type from the spec.
func NewUserJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// NewUserJSON500Response is a constructor method for a NewUser response.
// A *Response is returned with the configured status code and content type from the spec.
func NewUserJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// UserUpdateJSON200Response is a constructor method for a UserUpdate response.
// A *Response is returned with the configured status code and content type from the spec.
func UserUpdateJSON200Response(body BasicResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// UserUpdateJSON400Response is a constructor method for a UserUpdate response.
// A *Response is returned with the configured status code and content type from the spec.
func UserUpdateJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// UserUpdateJSON401Response is a constructor method for a UserUpdate response.
// A *Response is returned with the configured status code and content type from the spec.
func UserUpdateJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// UserUpdateJSON500Response is a constructor method for a UserUpdate response.
// A *Response is returned with the configured status code and content type from the spec.
func UserUpdateJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// LoginJSON200Response is a constructor method for a Login response.
// A *Response is returned with the configured status code and content type from the spec.
func LoginJSON200Response(body LoginResponse) *Response {
	return &Response{
		body:        body,
		Code:        200,
		contentType: "application/json",
	}
}

// LoginJSON400Response is a constructor method for a Login response.
// A *Response is returned with the configured status code and content type from the spec.
func LoginJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		Code:        400,
		contentType: "application/json",
	}
}

// LoginJSON401Response is a constructor method for a Login response.
// A *Response is returned with the configured status code and content type from the spec.
func LoginJSON401Response(body Unauthorized) *Response {
	return &Response{
		body:        body,
		Code:        401,
		contentType: "application/json",
	}
}

// LoginJSON500Response is a constructor method for a Login response.
// A *Response is returned with the configured status code and content type from the spec.
func LoginJSON500Response(body InternalServerError) *Response {
	return &Response{
		body:        body,
		Code:        500,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Lista todas as aplicações
	// (GET /applications)
	ApplicationsList(w http.ResponseWriter, r *http.Request) *Response
	// Cadastra uma aplicação
	// (POST /applications)
	NewApplication(w http.ResponseWriter, r *http.Request) *Response
	// Deleta um grupo de permissões de uma aplicação
	// (DELETE /applications/{application_id}/groups/{group_id})
	DeleteGroup(w http.ResponseWriter, r *http.Request, applicationID string, groupID string) *Response
	// Renomeia o grupo de permissões de uma aplicação
	// (PATCH /applications/{application_id}/groups/{group_id})
	RenameGroup(w http.ResponseWriter, r *http.Request, applicationID string, groupID string) *Response
	// Adiciona uma permissão de um grupo de usuários de uma aplicação
	// (POST /applications/{application_id}/groups/{group_id}/permissions)
	AddPermission(w http.ResponseWriter, r *http.Request, applicationID string, groupID string) *Response
	// Exclui uma permissão de um grupo de usuários de uma aplicação
	// (DELETE /applications/{application_id}/groups/{group_id}/permissions/{permission_key})
	DeletePermission(w http.ResponseWriter, r *http.Request, applicationID string, groupID string, permissionKey string) *Response
	// Atualiza uma permissão de um grupo de usuários de uma aplicação
	// (PUT /applications/{application_id}/groups/{group_id}/permissions/{permission_key})
	UpdatePermission(w http.ResponseWriter, r *http.Request, applicationID string, groupID string, permissionKey string) *Response
	// Todas as informações de uma aplicação
	// (GET /applications/{id})
	FindApplicationByID(w http.ResponseWriter, r *http.Request, id string) *Response
	// Lista os grupos de permissões de uma aplicação
	// (GET /applications/{id}/groups)
	GroupsList(w http.ResponseWriter, r *http.Request, id string) *Response
	// Cadastra um novo grupo de permissões de uma aplicação
	// (POST /applications/{id}/groups)
	NewGroup(w http.ResponseWriter, r *http.Request, id string) *Response
	// Lista os usuários de uma aplicação
	// (GET /applications/{id}/users)
	UsersList(w http.ResponseWriter, r *http.Request, id string) *Response
	// Cadastra um novo usuário
	// (POST /applications/{id}/users)
	NewUser(w http.ResponseWriter, r *http.Request, id string) *Response
	// Atualiza um usuário
	// (PUT /applications/{id}/users/{byEmail})
	UserUpdate(w http.ResponseWriter, r *http.Request, id string, byEmail openapi_types.Email) *Response
	// Autentica usuário
	// (POST /login)
	Login(w http.ResponseWriter, r *http.Request) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// ApplicationsList operation middleware
func (siw *ServerInterfaceWrapper) ApplicationsList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.ApplicationsList(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// NewApplication operation middleware
func (siw *ServerInterfaceWrapper) NewApplication(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.NewApplication(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// DeleteGroup operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "application_id" -------------
	var applicationID string

	if err := runtime.BindStyledParameter("simple", false, "application_id", chi.URLParam(r, "application_id"), &applicationID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "application_id"})
		return
	}

	// ------------- Path parameter "group_id" -------------
	var groupID string

	if err := runtime.BindStyledParameter("simple", false, "group_id", chi.URLParam(r, "group_id"), &groupID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "group_id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.DeleteGroup(w, r, applicationID, groupID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// RenameGroup operation middleware
func (siw *ServerInterfaceWrapper) RenameGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "application_id" -------------
	var applicationID string

	if err := runtime.BindStyledParameter("simple", false, "application_id", chi.URLParam(r, "application_id"), &applicationID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "application_id"})
		return
	}

	// ------------- Path parameter "group_id" -------------
	var groupID string

	if err := runtime.BindStyledParameter("simple", false, "group_id", chi.URLParam(r, "group_id"), &groupID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "group_id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.RenameGroup(w, r, applicationID, groupID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// AddPermission operation middleware
func (siw *ServerInterfaceWrapper) AddPermission(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "application_id" -------------
	var applicationID string

	if err := runtime.BindStyledParameter("simple", false, "application_id", chi.URLParam(r, "application_id"), &applicationID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "application_id"})
		return
	}

	// ------------- Path parameter "group_id" -------------
	var groupID string

	if err := runtime.BindStyledParameter("simple", false, "group_id", chi.URLParam(r, "group_id"), &groupID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "group_id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.AddPermission(w, r, applicationID, groupID)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// DeletePermission operation middleware
func (siw *ServerInterfaceWrapper) DeletePermission(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "application_id" -------------
	var applicationID string

	if err := runtime.BindStyledParameter("simple", false, "application_id", chi.URLParam(r, "application_id"), &applicationID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "application_id"})
		return
	}

	// ------------- Path parameter "group_id" -------------
	var groupID string

	if err := runtime.BindStyledParameter("simple", false, "group_id", chi.URLParam(r, "group_id"), &groupID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "group_id"})
		return
	}

	// ------------- Path parameter "permission_key" -------------
	var permissionKey string

	if err := runtime.BindStyledParameter("simple", false, "permission_key", chi.URLParam(r, "permission_key"), &permissionKey); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "permission_key"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.DeletePermission(w, r, applicationID, groupID, permissionKey)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// UpdatePermission operation middleware
func (siw *ServerInterfaceWrapper) UpdatePermission(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "application_id" -------------
	var applicationID string

	if err := runtime.BindStyledParameter("simple", false, "application_id", chi.URLParam(r, "application_id"), &applicationID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "application_id"})
		return
	}

	// ------------- Path parameter "group_id" -------------
	var groupID string

	if err := runtime.BindStyledParameter("simple", false, "group_id", chi.URLParam(r, "group_id"), &groupID); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "group_id"})
		return
	}

	// ------------- Path parameter "permission_key" -------------
	var permissionKey string

	if err := runtime.BindStyledParameter("simple", false, "permission_key", chi.URLParam(r, "permission_key"), &permissionKey); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "permission_key"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.UpdatePermission(w, r, applicationID, groupID, permissionKey)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// FindApplicationByID operation middleware
func (siw *ServerInterfaceWrapper) FindApplicationByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.FindApplicationByID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// GroupsList operation middleware
func (siw *ServerInterfaceWrapper) GroupsList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GroupsList(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// NewGroup operation middleware
func (siw *ServerInterfaceWrapper) NewGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.NewGroup(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// UsersList operation middleware
func (siw *ServerInterfaceWrapper) UsersList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.UsersList(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// NewUser operation middleware
func (siw *ServerInterfaceWrapper) NewUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.NewUser(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// UserUpdate operation middleware
func (siw *ServerInterfaceWrapper) UserUpdate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	// ------------- Path parameter "byEmail" -------------
	var byEmail openapi_types.Email

	if err := runtime.BindStyledParameter("simple", false, "byEmail", chi.URLParam(r, "byEmail"), &byEmail); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "byEmail"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.UserUpdate(w, r, id, byEmail)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.Login(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:    "/",
		BaseRouter: chi.NewRouter(),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Get("/applications", wrapper.ApplicationsList)
		r.Post("/applications", wrapper.NewApplication)
		r.Delete("/applications/{application_id}/groups/{group_id}", wrapper.DeleteGroup)
		r.Patch("/applications/{application_id}/groups/{group_id}", wrapper.RenameGroup)
		r.Post("/applications/{application_id}/groups/{group_id}/permissions", wrapper.AddPermission)
		r.Delete("/applications/{application_id}/groups/{group_id}/permissions/{permission_key}", wrapper.DeletePermission)
		r.Put("/applications/{application_id}/groups/{group_id}/permissions/{permission_key}", wrapper.UpdatePermission)
		r.Get("/applications/{id}", wrapper.FindApplicationByID)
		r.Get("/applications/{id}/groups", wrapper.GroupsList)
		r.Post("/applications/{id}/groups", wrapper.NewGroup)
		r.Get("/applications/{id}/users", wrapper.UsersList)
		r.Post("/applications/{id}/users", wrapper.NewUser)
		r.Put("/applications/{id}/users/{byEmail}", wrapper.UserUpdate)
		r.Post("/login", wrapper.Login)
	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
