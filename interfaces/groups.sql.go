// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: groups.sql

package postgresql

import (
	"context"

	"github.com/google/uuid"
)

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups
WHERE
    id = $1 AND application_id = $2
`

type DeleteGroupParams struct {
	ID            uuid.UUID
	ApplicationID uuid.UUID
}

func (q *Queries) DeleteGroup(ctx context.Context, arg DeleteGroupParams) error {
	_, err := q.db.Exec(ctx, deleteGroup, arg.ID, arg.ApplicationID)
	return err
}

const getGroupByName = `-- name: GetGroupByName :one
SELECT id, name, application_id, permissions FROM groups
WHERE
    name = $1 AND application_id = $2
`

type GetGroupByNameParams struct {
	Name          string
	ApplicationID uuid.UUID
}

func (q *Queries) GetGroupByName(ctx context.Context, arg GetGroupByNameParams) (Group, error) {
	row := q.db.QueryRow(ctx, getGroupByName, arg.Name, arg.ApplicationID)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ApplicationID,
		&i.Permissions,
	)
	return i, err
}

const getPermissionsGroup = `-- name: GetPermissionsGroup :one
SELECT permissions FROM groups
WHERE
    id = $1 AND application_id = $2
`

type GetPermissionsGroupParams struct {
	ID            uuid.UUID
	ApplicationID uuid.UUID
}

func (q *Queries) GetPermissionsGroup(ctx context.Context, arg GetPermissionsGroupParams) ([]byte, error) {
	row := q.db.QueryRow(ctx, getPermissionsGroup, arg.ID, arg.ApplicationID)
	var permissions []byte
	err := row.Scan(&permissions)
	return permissions, err
}

const insertGroup = `-- name: InsertGroup :one
INSERT INTO groups
    ( "name", "application_id", "permissions" ) VALUES
    ( $1, $2, $3 )
RETURNING "id"
`

type InsertGroupParams struct {
	Name          string
	ApplicationID uuid.UUID
	Permissions   []byte
}

func (q *Queries) InsertGroup(ctx context.Context, arg InsertGroupParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertGroup, arg.Name, arg.ApplicationID, arg.Permissions)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const listGrousByApplicationId = `-- name: ListGrousByApplicationId :many
SELECT id, name, application_id, permissions FROM groups
WHERE
    application_id = $1
`

func (q *Queries) ListGrousByApplicationId(ctx context.Context, applicationID uuid.UUID) ([]Group, error) {
	rows, err := q.db.Query(ctx, listGrousByApplicationId, applicationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ApplicationID,
			&i.Permissions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const renameGroup = `-- name: RenameGroup :exec
UPDATE groups
SET
    "name" = $3
WHERE
    id = $1 AND application_id = $2
`

type RenameGroupParams struct {
	ID            uuid.UUID
	ApplicationID uuid.UUID
	Name          string
}

func (q *Queries) RenameGroup(ctx context.Context, arg RenameGroupParams) error {
	_, err := q.db.Exec(ctx, renameGroup, arg.ID, arg.ApplicationID, arg.Name)
	return err
}
